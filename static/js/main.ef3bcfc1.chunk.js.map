{"version":3,"sources":["components/AppNavigation/index.js","components/AppNavigation/AppNavigation.jsx","config/calendar.js","components/CalendarWidget/CalendarNavigation.jsx","components/CalendarWidget/CalendarBody.jsx","components/DatePickerInput/index.js","components/DatePickerInput/DatePickerInput.jsx","components/CalendarWidget/index.js","components/CalendarWidget/CalendarWidget.jsx","pages/CalendarPage/index.js","pages/CalendarPage/CalendarPage.jsx","pages/DatePickerPage/index.js","pages/DatePickerPage/DatePickerPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["AppNavigation","location","useLocation","getRouteClass","pathname","className","to","calendarInternational","en","months","CalendarNavigation","calendar","onChangeNavigationMonth","onChangeNavigationYear","onChangeViewMode","getNavigationDisplay","useCallback","cal","mode","month","slice","year","flooredYear","Math","floor","navigationDisplay","useMemo","handleClickNavigation","viewMode","action","operator","onClick","weekdays","CalendarBody","today","selectedDate","onChange","onChangeCalendarMonth","onChangeCalendarYear","getCalendarFirstYear","calendarFirstYear","getMonthFirstDay","Date","getDay","monthFirstDay","getCalendarFirstDate","firstDay","date","getFullYear","getMonth","getDate","day","calendarFirstDate","calendarDates","Object","keys","length","monthDays","everyday","push","checkIsToday","checkDayIsInMonth","checkIsThisMonth","monthIndex","checkIsThisYear","yearIndex","checkIsSelected","map","weekday","dateIndex","cx","calendar__today","isInMonth","handleSelectDate","Array","DatePickerInput","children","value","isShowCalendar","isShowInput","type","placeholder","readOnly","CalendarWidget","userInputDate","calendarOnly","useState","setCalendar","setSelectedDate","setupDay","initDate","split","yyyy","mm","dd","Number","setupToday","todayDate","setIsShowCalendar","handleToggleCalendar","useEffect","handleChangeViewMode","handleChangeNavigationYear","yearNum","setFullYear","handleChangeNavigationMonth","monthNum","setMonth","handleChangeCalendarMonth","handleChangeCalendarYear","handleChangeDate","userSelectedDate","style","display","CalendarPage","DatePickerPage","defaultDate","App","StrictMode","basename","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ef3bcfc1.chunk.js","sourcesContent":["import AppNavigation from './AppNavigation';\n\nexport default AppNavigation;\n","import { Link, useLocation } from 'react-router-dom';\nimport './AppNavigation.scss';\n\nconst AppNavigation = () => {\n  const location = useLocation();\n\n  const getRouteClass = (pathname) => {\n    return pathname === location.pathname ? 'exact' : null;\n  };\n\n  return (\n    <nav className='app-navigation'>\n      <Link to='/calendar' className={getRouteClass('/calendar')}>\n        Task 1: Calendar\n      </Link>\n      <Link to='/date-picker' className={getRouteClass('/date-picker')}>\n        Task 2: Date Picker\n      </Link>\n    </nav>\n  );\n};\n\nexport default AppNavigation;\n","export const calendarInternational = {\n  weekdays: {\n    en: [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n    ],\n  },\n\n  months: {\n    en: [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ],\n  },\n};\n","import React, { useMemo, useCallback } from 'react';\nimport { calendarInternational } from '../../config/calendar';\nconst { months } = calendarInternational;\n\nconst CalendarNavigation = ({\n  calendar = {},\n  onChangeNavigationMonth,\n  onChangeNavigationYear,\n  onChangeViewMode,\n}) => {\n  const getNavigationDisplay = useCallback((cal) => {\n    if (cal.mode === 'day') {\n      return `${months.en[cal.month].slice(0, 3)} ${cal.year}`;\n    } else if (cal.mode === 'month') {\n      return cal.year;\n    } else if (cal.mode === 'year') {\n      const flooredYear = Math.floor(cal.year / 10) * 10;\n      return `${flooredYear} - ${flooredYear + 9}`;\n    }\n  }, []);\n\n  const navigationDisplay = useMemo(() => {\n    return getNavigationDisplay(calendar);\n  }, [calendar, getNavigationDisplay]);\n\n  const handleClickNavigation = useCallback(\n    (viewMode = 'day', action = 'next') => {\n      const operator = action === 'next' ? 1 : -1;\n\n      switch (viewMode) {\n        case 'day':\n          onChangeNavigationMonth(operator * 1);\n          break;\n\n        case 'month':\n          onChangeNavigationYear(operator * 1);\n          break;\n\n        case 'year':\n        default:\n          onChangeNavigationYear(operator * 10);\n          break;\n      }\n    },\n    [onChangeNavigationMonth, onChangeNavigationYear]\n  );\n\n  return (\n    <nav className='calendar__nav'>\n      {/* 控制區塊：上一月 */}\n      <div className='calendar__nav__month-controller'>\n        <button\n          className='calendar__nav__prev'\n          onClick={() => handleClickNavigation(calendar.mode, 'prev')}></button>\n      </div>\n      {/* 顯示目前年月，或是選擇後的年月 */}\n      <button\n        className='calendar__nav__month-year'\n        onClick={() => onChangeViewMode(calendar.mode)}>\n        {navigationDisplay}\n      </button>\n      {/* 控制區塊：下一月 */}\n      <div className='calendar__nav__month-controller'>\n        <button\n          className='calendar__nav__next'\n          onClick={() => handleClickNavigation(calendar.mode, 'next')}></button>\n      </div>\n    </nav>\n  );\n};\n\nexport default CalendarNavigation;\n","import React, { useMemo, useCallback } from 'react';\nimport cx from 'classnames';\nimport { calendarInternational } from '../../config/calendar';\nconst { months, weekdays } = calendarInternational;\n\nconst CalendarBody = ({\n  today,\n  calendar,\n  selectedDate,\n  onChange,\n  onChangeCalendarMonth,\n  onChangeCalendarYear,\n}) => {\n  const getCalendarFirstYear = useCallback((year) => {\n    return Math.floor(year / 10) * 10 - 1;\n  }, []);\n\n  const calendarFirstYear = useMemo(() => {\n    return getCalendarFirstYear(calendar.year);\n  }, [calendar.year, getCalendarFirstYear]);\n\n  const getMonthFirstDay = useCallback((year, month) => {\n    return new Date(year, month, 1).getDay();\n  }, []);\n\n  const monthFirstDay = useMemo(() => {\n    return getMonthFirstDay(calendar.year, calendar.month);\n  }, [calendar.year, calendar.month, getMonthFirstDay]);\n\n  const getCalendarFirstDate = useCallback((year, month, firstDay) => {\n    // 推算日曆第一格\n    const date = new Date(year, month, 1 - firstDay);\n\n    return {\n      year: date.getFullYear(),\n      month: date.getMonth(),\n      date: date.getDate(),\n      day: date.getDay(),\n    };\n  }, []);\n\n  const calendarFirstDate = useMemo(() => {\n    return getCalendarFirstDate(calendar.year, calendar.month, monthFirstDay);\n  }, [monthFirstDay, calendar.year, calendar.month, getCalendarFirstDate]);\n\n  const calendarDates = useMemo(() => {\n    // 計算應該是幾天\n    if (!Object.keys(calendarFirstDate).length) {\n      return;\n    }\n\n    const monthDays = [];\n\n    for (let date = 0; date < 42; date++) {\n      const everyday = new Date(\n        calendarFirstDate.year,\n        calendarFirstDate.month,\n        calendarFirstDate.date + date\n      );\n\n      monthDays.push(everyday);\n    }\n\n    return monthDays;\n  }, [calendarFirstDate]);\n\n  // 確認是否為當日的日期\n  const checkIsToday = useCallback(\n    (date) => {\n      return (\n        date.getFullYear() === today.year &&\n        date.getMonth() === today.month &&\n        date.getDate() === today.date\n      );\n    },\n    [today]\n  );\n\n  // 確認是否為當月的日期\n  const checkDayIsInMonth = (date) => {\n    return (\n      date.getMonth() === calendar.month && date.getFullYear() === calendar.year\n    );\n  };\n\n  // 確認月份相同\n  const checkIsThisMonth = (monthIndex) => {\n    return (\n      monthIndex === selectedDate.month && calendar.year === selectedDate.year\n    );\n  };\n\n  // 確認年份相同\n  const checkIsThisYear = (yearIndex) => {\n    return calendarFirstYear + yearIndex === selectedDate.year;\n  };\n\n  // 確認已選的日期\n  const checkIsSelected = (date) => {\n    return (\n      date.getFullYear() === selectedDate.year &&\n      date.getMonth() === selectedDate.month &&\n      date.getDate() === selectedDate.date\n    );\n  };\n\n  /**\n   * 選擇日期\n   * @param date 是所選的日期物件\n   */\n  const handleSelectDate = (date) => {\n    onChange({\n      date,\n      isInMonth: checkDayIsInMonth(date),\n    });\n  };\n\n  return (\n    <section className='calendar__body'>\n      {calendar.mode === 'day' ? (\n        <section>\n          {/* weekdays */}\n          <div className='calendar__weekdays'>\n            {weekdays.en.map((weekday) => (\n              <div className='calendar__weekday' key={weekday}>\n                {weekday.slice(0, 2)}\n              </div>\n            ))}\n          </div>\n\n          {/* days */}\n          {calendarDates.map((date, dateIndex) => (\n            <button\n              key={dateIndex}\n              data-date={date}\n              className={cx('calendar__day', {\n                calendar__today: checkIsToday(date),\n                'calendar__this-month': checkDayIsInMonth(date),\n                'calendar__day--selected': checkIsSelected(date),\n              })}\n              onClick={() => handleSelectDate(date)}>\n              {date.getDate()}\n            </button>\n          ))}\n        </section>\n      ) : null}\n\n      {/* 月份檢視 */}\n      {calendar.mode === 'month' ? (\n        <section className='calendar__months'>\n          {months.en.map((month, monthIndex) => (\n            <span\n              key={monthIndex}\n              className={cx('calendar__month', {\n                'calendar__month--selected': checkIsThisMonth(monthIndex),\n              })}>\n              <button onClick={() => onChangeCalendarMonth(monthIndex)}>\n                {month.slice(0, 3)}\n              </button>\n            </span>\n          ))}\n        </section>\n      ) : null}\n\n      {/* 年份檢視 */}\n      {calendar.mode === 'year' ? (\n        <section className='calendar__years'>\n          {[...Array(12)].map((year, yearIndex) => {\n            return (\n              <span\n                key={yearIndex}\n                className={cx('calendar__year', {\n                  'calendar__year--selected': checkIsThisYear(yearIndex),\n                })}>\n                <button\n                  onClick={() =>\n                    onChangeCalendarYear(calendarFirstYear + yearIndex)\n                  }>\n                  {calendarFirstYear + yearIndex}\n                </button>\n              </span>\n            );\n          })}\n        </section>\n      ) : null}\n    </section>\n  );\n};\n\nexport default CalendarBody;\n","import DatePickerInput from './DatePickerInput';\n\nexport default DatePickerInput;\n","import './DatePickerInput.scss';\n\nconst DatePickerInput = ({\n  children,\n  onClick,\n  value = '',\n  isShowCalendar = false,\n  isShowInput = true,\n}) => {\n  return (\n    <section>\n      {isShowInput ? (\n        <input\n          type='text'\n          className='datepicker__input'\n          placeholder='請選擇日期'\n          readOnly\n          value={value}\n          onClick={onClick}\n        />\n      ) : null}\n\n      {children}\n\n      {isShowInput && isShowCalendar ? (\n        <div className='datepicker__close-layer' onClick={onClick} />\n      ) : null}\n    </section>\n  );\n};\n\nexport default DatePickerInput;\n","import CalendarWidget from './CalendarWidget';\n\nexport default CalendarWidget;\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport CalendarNavigation from './CalendarNavigation';\nimport CalendarBody from './CalendarBody';\nimport DatePickerInput from '../../components/DatePickerInput';\n\nimport './CalendarWidget.scss';\n\nconst CalendarWidget = ({\n  userInputDate = '',\n  onChange = () => {},\n  calendarOnly = false,\n}) => {\n  const today = useMemo(\n    () => ({\n      year: new Date().getFullYear(),\n      month: new Date().getMonth(),\n      date: new Date().getDate(),\n    }),\n    []\n  );\n\n  const [calendar, setCalendar] = useState({\n    mode: 'day',\n    year: 2021,\n    month: 0,\n  });\n\n  const [selectedDate, setSelectedDate] = useState({});\n\n  const setupDay = useCallback((initDate) => {\n    const [yyyy, mm, dd] = initDate.split('-');\n    const year = Number(yyyy);\n    const month = Number(mm - 1);\n    const date = Number(dd);\n\n    setSelectedDate({\n      year,\n      month,\n      date,\n    });\n\n    setCalendar({\n      mode: 'day',\n      year,\n      month,\n    });\n  }, []);\n\n  const setupToday = useCallback(() => {\n    const date = new Date();\n    const todayDate = `${date.getFullYear()}-${\n      date.getMonth() + 1\n    }-${date.getDate()}`;\n\n    setupDay(todayDate);\n\n    onChange({\n      year: date.getFullYear(),\n      month: date.getMonth(),\n      date: date.getDate(),\n    });\n  }, [onChange, setupDay]);\n\n  const [isShowCalendar, setIsShowCalendar] = useState(false);\n\n  const handleToggleCalendar = useCallback(() => {\n    setIsShowCalendar(!isShowCalendar);\n  }, [isShowCalendar]);\n\n  useEffect(() => {\n    if (typeof userInputDate === 'string' && userInputDate) {\n      setupDay(userInputDate);\n    } else {\n      // 初始化\n      setupToday();\n      setIsShowCalendar(true);\n    }\n  }, [userInputDate, setupToday]);\n\n  const handleChangeViewMode = useCallback(() => {\n    switch (calendar.mode) {\n      case 'day': {\n        setCalendar((cal) => ({\n          ...cal,\n          mode: 'month',\n        }));\n\n        break;\n      }\n\n      case 'month': {\n        setCalendar((cal) => ({\n          ...cal,\n          mode: 'year',\n        }));\n\n        break;\n      }\n\n      default:\n        break;\n    }\n  }, [calendar.mode]);\n\n  /**\n   * 切換西元年\n   * @param yearNum 上一年、下一年\n   */\n  const handleChangeNavigationYear = useCallback(\n    (yearNum) => {\n      const date = new Date(`${calendar.year}-${calendar.month + 1}`);\n\n      date.setFullYear(date.getFullYear() + yearNum);\n      setCalendar((cal) => ({\n        ...cal,\n        year: date.getFullYear(),\n      }));\n    },\n    [calendar.year, calendar.month]\n  );\n\n  /**\n   * 切換月份\n   * @param monthNum 上個月、下個月\n   */\n  const handleChangeNavigationMonth = useCallback(\n    (monthNum) => {\n      const date = new Date(`${calendar.year}-${calendar.month + 1}`);\n\n      date.setMonth(date.getMonth() + monthNum);\n      setCalendar((cal) => ({\n        ...cal,\n        month: date.getMonth(),\n        year: date.getFullYear(),\n      }));\n    },\n    [calendar.year, calendar.month]\n  );\n\n  /**\n   * 設定月份\n   * @param monthIndex 第幾個月\n   */\n  const handleChangeCalendarMonth = useCallback((monthIndex) => {\n    setCalendar((cal) => ({\n      ...cal,\n      month: monthIndex,\n      mode: 'day',\n    }));\n  }, []);\n\n  /**\n   * 設定年份\n   * @param year 經子層傳上來的年份\n   */\n  const handleChangeCalendarYear = useCallback((year) => {\n    setCalendar((cal) => ({\n      ...cal,\n      year,\n      mode: 'month',\n    }));\n  }, []);\n\n  const handleChangeDate = useCallback(\n    ({ date, isInMonth }) => {\n      if (!isInMonth) {\n        setCalendar((cal) => ({\n          ...cal,\n          year: date.getFullYear(),\n          month: date.getMonth(),\n        }));\n      }\n\n      const userSelectedDate = {\n        year: date.getFullYear(),\n        month: date.getMonth(),\n        date: date.getDate(),\n      };\n\n      setSelectedDate(userSelectedDate);\n      onChange(userSelectedDate);\n\n      if (!calendarOnly) {\n        handleToggleCalendar();\n      }\n    },\n    [calendarOnly, handleToggleCalendar, onChange]\n  );\n\n  return (\n    <DatePickerInput\n      value={userInputDate}\n      onClick={handleToggleCalendar}\n      isShowCalendar={isShowCalendar}\n      isShowInput={!calendarOnly}>\n      {isShowCalendar ? (\n        <section\n          className='calendar'\n          style={{ display: isShowCalendar ? 'block' : 'none' }}>\n          <button className='show-today-button' onClick={setupToday}>\n            顯示今日\n          </button>\n          <CalendarNavigation\n            calendar={calendar}\n            onChangeNavigationMonth={handleChangeNavigationMonth}\n            onChangeNavigationYear={handleChangeNavigationYear}\n            onChangeViewMode={handleChangeViewMode}\n          />\n          <CalendarBody\n            today={today}\n            calendar={calendar}\n            selectedDate={selectedDate}\n            onChange={handleChangeDate}\n            onChangeCalendarMonth={handleChangeCalendarMonth}\n            onChangeCalendarYear={handleChangeCalendarYear}\n          />\n        </section>\n      ) : null}\n    </DatePickerInput>\n  );\n};\n\nexport default CalendarWidget;\n","import CalendarPage from './CalendarPage';\n\nexport default CalendarPage;\n","import CalendarWidget from '../../components/CalendarWidget';\n\nconst CalendarPage = () => {\n  return <CalendarWidget calendarOnly />;\n};\n\nexport default CalendarPage;\n","import DatePickerPage from './DatePickerPage';\n\nexport default DatePickerPage;\n","import React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport CalendarWidget from '../../components/CalendarWidget';\n\nimport './DatePickerPage.scss';\n\nconst DatePickerPage = () => {\n  const defaultDate = useMemo(() => ({ year: 2021, month: 3, date: 8 }), []);\n  const [selectedDate, setSelectedDate] = useState(defaultDate);\n\n  const userInputDate = useMemo(() => {\n    const format = Object.keys(selectedDate).length\n      ? `${selectedDate.year}-${selectedDate.month + 1}-${selectedDate.date}`\n      : '';\n    return format;\n  }, [selectedDate]);\n\n  const handleChangeDate = useCallback((date) => {\n    setSelectedDate(date);\n  }, []);\n\n  return (\n    <section className='datepicker'>\n      <CalendarWidget\n        userInputDate={userInputDate}\n        onChange={handleChangeDate}\n      />\n    </section>\n  );\n};\n\nexport default DatePickerPage;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from 'react-router-dom';\n\nimport AppNavigation from './components/AppNavigation';\nimport CalendarPage from './pages/CalendarPage';\nimport DatePickerPage from './pages/DatePickerPage';\n\nimport './app.scss';\n\nfunction App() {\n  return (\n    <React.StrictMode>\n      <Router basename='my-react-calendar'>\n        <AppNavigation />\n        <Switch>\n          <Route\n            exact\n            path='/calendar'\n            key='calendar'\n            render={() => <CalendarPage />}\n          />\n          <Route\n            exact\n            path='/date-picker'\n            key='date-picker'\n            render={() => <DatePickerPage />}\n          />\n\n          <Redirect\n            to={{\n              pathname: '/calendar',\n            }}\n          />\n        </Switch>\n      </Router>\n    </React.StrictMode>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}